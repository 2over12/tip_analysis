State 0:
program' -> . program [ # ]
-- On IDENT shift to state 1
-- On tip_function shift to state 99
-- On program shift to state 101
-- On list(tip_function) shift to state 102
-- On EOF reduce production list(tip_function) -> 

State 1:
tip_function -> IDENT . LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR LBRACKET option(var_stat) statement ret_stat RBRACKET [ IDENT EOF ]
-- On LPAR shift to state 2

State 2:
tip_function -> IDENT LPAR . loption(separated_nonempty_list(COMMA,IDENT)) RPAR LBRACKET option(var_stat) statement ret_stat RBRACKET [ IDENT EOF ]
-- On IDENT shift to state 3
-- On separated_nonempty_list(COMMA,IDENT) shift to state 6
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 7
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,IDENT)) -> 

State 3:
separated_nonempty_list(COMMA,IDENT) -> IDENT . [ SEMI RPAR ]
separated_nonempty_list(COMMA,IDENT) -> IDENT . COMMA separated_nonempty_list(COMMA,IDENT) [ SEMI RPAR ]
-- On COMMA shift to state 4
-- On SEMI reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT 
-- On RPAR reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT 

State 4:
separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA . separated_nonempty_list(COMMA,IDENT) [ SEMI RPAR ]
-- On IDENT shift to state 3
-- On separated_nonempty_list(COMMA,IDENT) shift to state 5

State 5:
separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT) . [ SEMI RPAR ]
-- On SEMI reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT) 
-- On RPAR reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT) 

State 6:
loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT) . [ SEMI RPAR ]
-- On SEMI reduce production loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT) 
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT) 

State 7:
tip_function -> IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) . RPAR LBRACKET option(var_stat) statement ret_stat RBRACKET [ IDENT EOF ]
-- On RPAR shift to state 8

State 8:
tip_function -> IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR . LBRACKET option(var_stat) statement ret_stat RBRACKET [ IDENT EOF ]
-- On LBRACKET shift to state 9

State 9:
tip_function -> IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR LBRACKET . option(var_stat) statement ret_stat RBRACKET [ IDENT EOF ]
-- On VAR shift to state 10
-- On var_stat shift to state 13
-- On option(var_stat) shift to state 14
-- On WHILE reduce production option(var_stat) -> 
-- On TIMES reduce production option(var_stat) -> 
-- On OUTPUT reduce production option(var_stat) -> 
-- On IF reduce production option(var_stat) -> 
-- On IDENT reduce production option(var_stat) -> 

State 10:
var_stat -> VAR . loption(separated_nonempty_list(COMMA,IDENT)) SEMI [ WHILE TIMES OUTPUT IF IDENT ]
-- On IDENT shift to state 3
-- On separated_nonempty_list(COMMA,IDENT) shift to state 6
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 11
-- On SEMI reduce production loption(separated_nonempty_list(COMMA,IDENT)) -> 

State 11:
var_stat -> VAR loption(separated_nonempty_list(COMMA,IDENT)) . SEMI [ WHILE TIMES OUTPUT IF IDENT ]
-- On SEMI shift to state 12

State 12:
var_stat -> VAR loption(separated_nonempty_list(COMMA,IDENT)) SEMI . [ WHILE TIMES OUTPUT IF IDENT ]
-- On WHILE reduce production var_stat -> VAR loption(separated_nonempty_list(COMMA,IDENT)) SEMI 
-- On TIMES reduce production var_stat -> VAR loption(separated_nonempty_list(COMMA,IDENT)) SEMI 
-- On OUTPUT reduce production var_stat -> VAR loption(separated_nonempty_list(COMMA,IDENT)) SEMI 
-- On IF reduce production var_stat -> VAR loption(separated_nonempty_list(COMMA,IDENT)) SEMI 
-- On IDENT reduce production var_stat -> VAR loption(separated_nonempty_list(COMMA,IDENT)) SEMI 

State 13:
option(var_stat) -> var_stat . [ WHILE TIMES OUTPUT IF IDENT ]
-- On WHILE reduce production option(var_stat) -> var_stat 
-- On TIMES reduce production option(var_stat) -> var_stat 
-- On OUTPUT reduce production option(var_stat) -> var_stat 
-- On IF reduce production option(var_stat) -> var_stat 
-- On IDENT reduce production option(var_stat) -> var_stat 

State 14:
tip_function -> IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR LBRACKET option(var_stat) . statement ret_stat RBRACKET [ IDENT EOF ]
-- On WHILE shift to state 15
-- On TIMES shift to state 64
-- On OUTPUT shift to state 69
-- On IF shift to state 72
-- On IDENT shift to state 77
-- On statement shift to state 93
-- On single_statement shift to state 87

State 15:
single_statement -> WHILE . LPAR expr RPAR LBRACKET statement RBRACKET [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On LPAR shift to state 16

State 16:
single_statement -> WHILE LPAR . expr RPAR LBRACKET statement RBRACKET [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 61

State 17:
expr -> TIMES . expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 60

State 18:
expr -> NULL . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES reduce production expr -> NULL 
-- On SEMI reduce production expr -> NULL 
-- On RPAR reduce production expr -> NULL 
-- On RBRACKET reduce production expr -> NULL 
-- On PROJECT reduce production expr -> NULL 
-- On PLUS reduce production expr -> NULL 
-- On MINUS reduce production expr -> NULL 
-- On LPAR reduce production expr -> NULL 
-- On GREATER reduce production expr -> NULL 
-- On EQEQ reduce production expr -> NULL 
-- On DIV reduce production expr -> NULL 
-- On COMMA reduce production expr -> NULL 

State 19:
expr -> MINUS . expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 59

State 20:
expr -> LPAR . expr RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 57

State 21:
expr -> LBRACKET . loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On IDENT shift to state 22
-- On separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) shift to state 54
-- On loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) shift to state 55
-- On RBRACKET reduce production loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) -> 

State 22:
separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) -> IDENT . COLON expr [ RBRACKET ]
separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) [ RBRACKET ]
-- On COLON shift to state 23

State 23:
separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) -> IDENT COLON . expr [ RBRACKET ]
separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) [ RBRACKET ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 51

State 24:
expr -> INT . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES reduce production expr -> INT 
-- On SEMI reduce production expr -> INT 
-- On RPAR reduce production expr -> INT 
-- On RBRACKET reduce production expr -> INT 
-- On PROJECT reduce production expr -> INT 
-- On PLUS reduce production expr -> INT 
-- On MINUS reduce production expr -> INT 
-- On LPAR reduce production expr -> INT 
-- On GREATER reduce production expr -> INT 
-- On EQEQ reduce production expr -> INT 
-- On DIV reduce production expr -> INT 
-- On COMMA reduce production expr -> INT 

State 25:
expr -> INPUT . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES reduce production expr -> INPUT 
-- On SEMI reduce production expr -> INPUT 
-- On RPAR reduce production expr -> INPUT 
-- On RBRACKET reduce production expr -> INPUT 
-- On PROJECT reduce production expr -> INPUT 
-- On PLUS reduce production expr -> INPUT 
-- On MINUS reduce production expr -> INPUT 
-- On LPAR reduce production expr -> INPUT 
-- On GREATER reduce production expr -> INPUT 
-- On EQEQ reduce production expr -> INPUT 
-- On DIV reduce production expr -> INPUT 
-- On COMMA reduce production expr -> INPUT 

State 26:
expr -> IDENT . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES reduce production expr -> IDENT 
-- On SEMI reduce production expr -> IDENT 
-- On RPAR reduce production expr -> IDENT 
-- On RBRACKET reduce production expr -> IDENT 
-- On PROJECT reduce production expr -> IDENT 
-- On PLUS reduce production expr -> IDENT 
-- On MINUS reduce production expr -> IDENT 
-- On LPAR reduce production expr -> IDENT 
-- On GREATER reduce production expr -> IDENT 
-- On EQEQ reduce production expr -> IDENT 
-- On DIV reduce production expr -> IDENT 
-- On COMMA reduce production expr -> IDENT 

State 27:
expr -> AMPER . IDENT [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On IDENT shift to state 28

State 28:
expr -> AMPER IDENT . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES reduce production expr -> AMPER IDENT 
-- On SEMI reduce production expr -> AMPER IDENT 
-- On RPAR reduce production expr -> AMPER IDENT 
-- On RBRACKET reduce production expr -> AMPER IDENT 
-- On PROJECT reduce production expr -> AMPER IDENT 
-- On PLUS reduce production expr -> AMPER IDENT 
-- On MINUS reduce production expr -> AMPER IDENT 
-- On LPAR reduce production expr -> AMPER IDENT 
-- On GREATER reduce production expr -> AMPER IDENT 
-- On EQEQ reduce production expr -> AMPER IDENT 
-- On DIV reduce production expr -> AMPER IDENT 
-- On COMMA reduce production expr -> AMPER IDENT 

State 29:
expr -> ALLOC . expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 30

State 30:
expr -> ALLOC expr . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PLUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On PROJECT shift to state 31
-- On LPAR shift to state 32
-- On TIMES reduce production expr -> ALLOC expr 
-- On SEMI reduce production expr -> ALLOC expr 
-- On RPAR reduce production expr -> ALLOC expr 
-- On RBRACKET reduce production expr -> ALLOC expr 
-- On PLUS reduce production expr -> ALLOC expr 
-- On MINUS reduce production expr -> ALLOC expr 
-- On GREATER reduce production expr -> ALLOC expr 
-- On EQEQ reduce production expr -> ALLOC expr 
-- On DIV reduce production expr -> ALLOC expr 
-- On COMMA reduce production expr -> ALLOC expr 

State 31:
expr -> expr PROJECT . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES reduce production expr -> expr PROJECT 
-- On SEMI reduce production expr -> expr PROJECT 
-- On RPAR reduce production expr -> expr PROJECT 
-- On RBRACKET reduce production expr -> expr PROJECT 
-- On PROJECT reduce production expr -> expr PROJECT 
-- On PLUS reduce production expr -> expr PROJECT 
-- On MINUS reduce production expr -> expr PROJECT 
-- On LPAR reduce production expr -> expr PROJECT 
-- On GREATER reduce production expr -> expr PROJECT 
-- On EQEQ reduce production expr -> expr PROJECT 
-- On DIV reduce production expr -> expr PROJECT 
-- On COMMA reduce production expr -> expr PROJECT 

State 32:
expr -> expr LPAR . loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On separated_nonempty_list(COMMA,expr) shift to state 33
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 34
-- On expr shift to state 36
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 33:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RPAR ]
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 

State 34:
expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) . RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On RPAR shift to state 35

State 35:
expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On SEMI reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On RPAR reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On RBRACKET reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On PROJECT reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On PLUS reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On MINUS reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On LPAR reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On GREATER reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On EQEQ reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On DIV reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On COMMA reduce production expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 

State 36:
expr -> expr . PLUS expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
separated_nonempty_list(COMMA,expr) -> expr . [ RPAR ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAR ]
-- On TIMES shift to state 37
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On GREATER shift to state 45
-- On EQEQ shift to state 47
-- On DIV shift to state 41
-- On COMMA shift to state 49
-- On RPAR reduce production separated_nonempty_list(COMMA,expr) -> expr 

State 37:
expr -> expr TIMES . expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 38

State 38:
expr -> expr . PLUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr TIMES expr . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On PROJECT shift to state 31
-- On LPAR shift to state 32
-- On TIMES reduce production expr -> expr TIMES expr 
-- On SEMI reduce production expr -> expr TIMES expr 
-- On RPAR reduce production expr -> expr TIMES expr 
-- On RBRACKET reduce production expr -> expr TIMES expr 
-- On PLUS reduce production expr -> expr TIMES expr 
-- On MINUS reduce production expr -> expr TIMES expr 
-- On GREATER reduce production expr -> expr TIMES expr 
-- On EQEQ reduce production expr -> expr TIMES expr 
-- On DIV reduce production expr -> expr TIMES expr 
-- On COMMA reduce production expr -> expr TIMES expr 

State 39:
expr -> expr PLUS . expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 40

State 40:
expr -> expr . PLUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr PLUS expr . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 37
-- On PROJECT shift to state 31
-- On LPAR shift to state 32
-- On DIV shift to state 41
-- On SEMI reduce production expr -> expr PLUS expr 
-- On RPAR reduce production expr -> expr PLUS expr 
-- On RBRACKET reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On MINUS reduce production expr -> expr PLUS expr 
-- On GREATER reduce production expr -> expr PLUS expr 
-- On EQEQ reduce production expr -> expr PLUS expr 
-- On COMMA reduce production expr -> expr PLUS expr 

State 41:
expr -> expr DIV . expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 42

State 42:
expr -> expr . PLUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr DIV expr . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On PROJECT shift to state 31
-- On LPAR shift to state 32
-- On TIMES reduce production expr -> expr DIV expr 
-- On SEMI reduce production expr -> expr DIV expr 
-- On RPAR reduce production expr -> expr DIV expr 
-- On RBRACKET reduce production expr -> expr DIV expr 
-- On PLUS reduce production expr -> expr DIV expr 
-- On MINUS reduce production expr -> expr DIV expr 
-- On GREATER reduce production expr -> expr DIV expr 
-- On EQEQ reduce production expr -> expr DIV expr 
-- On DIV reduce production expr -> expr DIV expr 
-- On COMMA reduce production expr -> expr DIV expr 

State 43:
expr -> expr MINUS . expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 44

State 44:
expr -> expr . PLUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr MINUS expr . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 37
-- On PROJECT shift to state 31
-- On LPAR shift to state 32
-- On DIV shift to state 41
-- On SEMI reduce production expr -> expr MINUS expr 
-- On RPAR reduce production expr -> expr MINUS expr 
-- On RBRACKET reduce production expr -> expr MINUS expr 
-- On PLUS reduce production expr -> expr MINUS expr 
-- On MINUS reduce production expr -> expr MINUS expr 
-- On GREATER reduce production expr -> expr MINUS expr 
-- On EQEQ reduce production expr -> expr MINUS expr 
-- On COMMA reduce production expr -> expr MINUS expr 

State 45:
expr -> expr GREATER . expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 46

State 46:
expr -> expr . PLUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr GREATER expr . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 37
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On DIV shift to state 41
-- On SEMI reduce production expr -> expr GREATER expr 
-- On RPAR reduce production expr -> expr GREATER expr 
-- On RBRACKET reduce production expr -> expr GREATER expr 
-- On GREATER reduce production expr -> expr GREATER expr 
-- On EQEQ reduce production expr -> expr GREATER expr 
-- On COMMA reduce production expr -> expr GREATER expr 

State 47:
expr -> expr EQEQ . expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 48

State 48:
expr -> expr . PLUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr EQEQ expr . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES shift to state 37
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On DIV shift to state 41
-- On SEMI reduce production expr -> expr EQEQ expr 
-- On RPAR reduce production expr -> expr EQEQ expr 
-- On RBRACKET reduce production expr -> expr EQEQ expr 
-- On GREATER reduce production expr -> expr EQEQ expr 
-- On EQEQ reduce production expr -> expr EQEQ expr 
-- On COMMA reduce production expr -> expr EQEQ expr 

State 49:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAR ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On separated_nonempty_list(COMMA,expr) shift to state 50
-- On expr shift to state 36

State 50:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RPAR ]
-- On RPAR reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 

State 51:
expr -> expr . PLUS expr [ TIMES RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) -> IDENT COLON expr . [ RBRACKET ]
separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) [ RBRACKET ]
-- On TIMES shift to state 37
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On GREATER shift to state 45
-- On EQEQ shift to state 47
-- On DIV shift to state 41
-- On COMMA shift to state 52
-- On RBRACKET reduce production separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) -> IDENT COLON expr 

State 52:
separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) [ RBRACKET ]
-- On IDENT shift to state 22
-- On separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) shift to state 53

State 53:
separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) -> IDENT COLON expr COMMA separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) . [ RBRACKET ]
-- On RBRACKET reduce production separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) -> IDENT COLON expr COMMA separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) 

State 54:
loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) -> separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) . [ RBRACKET ]
-- On RBRACKET reduce production loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) -> separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr)) 

State 55:
expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) . RBRACKET [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On RBRACKET shift to state 56

State 56:
expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On SEMI reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On RPAR reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On RBRACKET reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On PROJECT reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On PLUS reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On MINUS reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On LPAR reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On GREATER reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On EQEQ reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On DIV reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 
-- On COMMA reduce production expr -> LBRACKET loption(separated_nonempty_list(COMMA,separated_pair(IDENT,COLON,expr))) RBRACKET 

State 57:
expr -> LPAR expr . RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PLUS expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . MINUS expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . TIMES expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . DIV expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . EQEQ expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . GREATER expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . PROJECT [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
-- On TIMES shift to state 37
-- On RPAR shift to state 58
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On GREATER shift to state 45
-- On EQEQ shift to state 47
-- On DIV shift to state 41

State 58:
expr -> LPAR expr RPAR . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On TIMES reduce production expr -> LPAR expr RPAR 
-- On SEMI reduce production expr -> LPAR expr RPAR 
-- On RPAR reduce production expr -> LPAR expr RPAR 
-- On RBRACKET reduce production expr -> LPAR expr RPAR 
-- On PROJECT reduce production expr -> LPAR expr RPAR 
-- On PLUS reduce production expr -> LPAR expr RPAR 
-- On MINUS reduce production expr -> LPAR expr RPAR 
-- On LPAR reduce production expr -> LPAR expr RPAR 
-- On GREATER reduce production expr -> LPAR expr RPAR 
-- On EQEQ reduce production expr -> LPAR expr RPAR 
-- On DIV reduce production expr -> LPAR expr RPAR 
-- On COMMA reduce production expr -> LPAR expr RPAR 

State 59:
expr -> expr . PLUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> MINUS expr . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On PROJECT shift to state 31
-- On LPAR shift to state 32
-- On TIMES reduce production expr -> MINUS expr 
-- On SEMI reduce production expr -> MINUS expr 
-- On RPAR reduce production expr -> MINUS expr 
-- On RBRACKET reduce production expr -> MINUS expr 
-- On PLUS reduce production expr -> MINUS expr 
-- On MINUS reduce production expr -> MINUS expr 
-- On GREATER reduce production expr -> MINUS expr 
-- On EQEQ reduce production expr -> MINUS expr 
-- On DIV reduce production expr -> MINUS expr 
-- On COMMA reduce production expr -> MINUS expr 

State 60:
expr -> TIMES expr . [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PLUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . MINUS expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . TIMES expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . DIV expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . EQEQ expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . GREATER expr [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
expr -> expr . PROJECT [ TIMES SEMI RPAR RBRACKET PROJECT PLUS MINUS LPAR GREATER EQEQ DIV COMMA ]
-- On PROJECT shift to state 31
-- On LPAR shift to state 32
-- On TIMES reduce production expr -> TIMES expr 
-- On SEMI reduce production expr -> TIMES expr 
-- On RPAR reduce production expr -> TIMES expr 
-- On RBRACKET reduce production expr -> TIMES expr 
-- On PLUS reduce production expr -> TIMES expr 
-- On MINUS reduce production expr -> TIMES expr 
-- On GREATER reduce production expr -> TIMES expr 
-- On EQEQ reduce production expr -> TIMES expr 
-- On DIV reduce production expr -> TIMES expr 
-- On COMMA reduce production expr -> TIMES expr 

State 61:
expr -> expr . PLUS expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . MINUS expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . TIMES expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . DIV expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . EQEQ expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . GREATER expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . PROJECT [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
single_statement -> WHILE LPAR expr . RPAR LBRACKET statement RBRACKET [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On TIMES shift to state 37
-- On RPAR shift to state 62
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On GREATER shift to state 45
-- On EQEQ shift to state 47
-- On DIV shift to state 41

State 62:
single_statement -> WHILE LPAR expr RPAR . LBRACKET statement RBRACKET [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On LBRACKET shift to state 63

State 63:
single_statement -> WHILE LPAR expr RPAR LBRACKET . statement RBRACKET [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On WHILE shift to state 15
-- On TIMES shift to state 64
-- On OUTPUT shift to state 69
-- On IF shift to state 72
-- On IDENT shift to state 77
-- On statement shift to state 91
-- On single_statement shift to state 87

State 64:
single_statement -> TIMES . IDENT EQ expr SEMI [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On IDENT shift to state 65

State 65:
single_statement -> TIMES IDENT . EQ expr SEMI [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On EQ shift to state 66

State 66:
single_statement -> TIMES IDENT EQ . expr SEMI [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 67

State 67:
expr -> expr . PLUS expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . MINUS expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . TIMES expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . DIV expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . EQEQ expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . GREATER expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . PROJECT [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
single_statement -> TIMES IDENT EQ expr . SEMI [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On TIMES shift to state 37
-- On SEMI shift to state 68
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On GREATER shift to state 45
-- On EQEQ shift to state 47
-- On DIV shift to state 41

State 68:
single_statement -> TIMES IDENT EQ expr SEMI . [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On WHILE reduce production single_statement -> TIMES IDENT EQ expr SEMI 
-- On TIMES reduce production single_statement -> TIMES IDENT EQ expr SEMI 
-- On RET reduce production single_statement -> TIMES IDENT EQ expr SEMI 
-- On RBRACKET reduce production single_statement -> TIMES IDENT EQ expr SEMI 
-- On OUTPUT reduce production single_statement -> TIMES IDENT EQ expr SEMI 
-- On IF reduce production single_statement -> TIMES IDENT EQ expr SEMI 
-- On IDENT reduce production single_statement -> TIMES IDENT EQ expr SEMI 

State 69:
single_statement -> OUTPUT . expr SEMI [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 70

State 70:
expr -> expr . PLUS expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . MINUS expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . TIMES expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . DIV expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . EQEQ expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . GREATER expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . PROJECT [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
single_statement -> OUTPUT expr . SEMI [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On TIMES shift to state 37
-- On SEMI shift to state 71
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On GREATER shift to state 45
-- On EQEQ shift to state 47
-- On DIV shift to state 41

State 71:
single_statement -> OUTPUT expr SEMI . [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On WHILE reduce production single_statement -> OUTPUT expr SEMI 
-- On TIMES reduce production single_statement -> OUTPUT expr SEMI 
-- On RET reduce production single_statement -> OUTPUT expr SEMI 
-- On RBRACKET reduce production single_statement -> OUTPUT expr SEMI 
-- On OUTPUT reduce production single_statement -> OUTPUT expr SEMI 
-- On IF reduce production single_statement -> OUTPUT expr SEMI 
-- On IDENT reduce production single_statement -> OUTPUT expr SEMI 

State 72:
single_statement -> IF . LPAR expr RPAR LBRACKET statement RBRACKET option(else_body) [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On LPAR shift to state 73

State 73:
single_statement -> IF LPAR . expr RPAR LBRACKET statement RBRACKET option(else_body) [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 74

State 74:
expr -> expr . PLUS expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . MINUS expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . TIMES expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . DIV expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . EQEQ expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . GREATER expr [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . PROJECT [ TIMES RPAR PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
single_statement -> IF LPAR expr . RPAR LBRACKET statement RBRACKET option(else_body) [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On TIMES shift to state 37
-- On RPAR shift to state 75
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On GREATER shift to state 45
-- On EQEQ shift to state 47
-- On DIV shift to state 41

State 75:
single_statement -> IF LPAR expr RPAR . LBRACKET statement RBRACKET option(else_body) [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On LBRACKET shift to state 76

State 76:
single_statement -> IF LPAR expr RPAR LBRACKET . statement RBRACKET option(else_body) [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On WHILE shift to state 15
-- On TIMES shift to state 64
-- On OUTPUT shift to state 69
-- On IF shift to state 72
-- On IDENT shift to state 77
-- On statement shift to state 81
-- On single_statement shift to state 87

State 77:
single_statement -> IDENT . EQ expr SEMI [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On EQ shift to state 78

State 78:
single_statement -> IDENT EQ . expr SEMI [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 79

State 79:
expr -> expr . PLUS expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . MINUS expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . TIMES expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . DIV expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . EQEQ expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . GREATER expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . PROJECT [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
single_statement -> IDENT EQ expr . SEMI [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On TIMES shift to state 37
-- On SEMI shift to state 80
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On GREATER shift to state 45
-- On EQEQ shift to state 47
-- On DIV shift to state 41

State 80:
single_statement -> IDENT EQ expr SEMI . [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On WHILE reduce production single_statement -> IDENT EQ expr SEMI 
-- On TIMES reduce production single_statement -> IDENT EQ expr SEMI 
-- On RET reduce production single_statement -> IDENT EQ expr SEMI 
-- On RBRACKET reduce production single_statement -> IDENT EQ expr SEMI 
-- On OUTPUT reduce production single_statement -> IDENT EQ expr SEMI 
-- On IF reduce production single_statement -> IDENT EQ expr SEMI 
-- On IDENT reduce production single_statement -> IDENT EQ expr SEMI 

State 81:
single_statement -> IF LPAR expr RPAR LBRACKET statement . RBRACKET option(else_body) [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On RBRACKET shift to state 82

State 82:
single_statement -> IF LPAR expr RPAR LBRACKET statement RBRACKET . option(else_body) [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On ELSE shift to state 83
-- On option(else_body) shift to state 89
-- On else_body shift to state 90
-- On WHILE reduce production option(else_body) -> 
-- On TIMES reduce production option(else_body) -> 
-- On RET reduce production option(else_body) -> 
-- On RBRACKET reduce production option(else_body) -> 
-- On OUTPUT reduce production option(else_body) -> 
-- On IF reduce production option(else_body) -> 
-- On IDENT reduce production option(else_body) -> 

State 83:
else_body -> ELSE . LBRACKET statement RBRACKET [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On LBRACKET shift to state 84

State 84:
else_body -> ELSE LBRACKET . statement RBRACKET [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On WHILE shift to state 15
-- On TIMES shift to state 64
-- On OUTPUT shift to state 69
-- On IF shift to state 72
-- On IDENT shift to state 77
-- On statement shift to state 85
-- On single_statement shift to state 87

State 85:
else_body -> ELSE LBRACKET statement . RBRACKET [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On RBRACKET shift to state 86

State 86:
else_body -> ELSE LBRACKET statement RBRACKET . [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On WHILE reduce production else_body -> ELSE LBRACKET statement RBRACKET 
-- On TIMES reduce production else_body -> ELSE LBRACKET statement RBRACKET 
-- On RET reduce production else_body -> ELSE LBRACKET statement RBRACKET 
-- On RBRACKET reduce production else_body -> ELSE LBRACKET statement RBRACKET 
-- On OUTPUT reduce production else_body -> ELSE LBRACKET statement RBRACKET 
-- On IF reduce production else_body -> ELSE LBRACKET statement RBRACKET 
-- On IDENT reduce production else_body -> ELSE LBRACKET statement RBRACKET 

State 87:
statement -> single_statement . statement [ RET RBRACKET ]
statement -> single_statement . [ RET RBRACKET ]
-- On WHILE shift to state 15
-- On TIMES shift to state 64
-- On OUTPUT shift to state 69
-- On IF shift to state 72
-- On IDENT shift to state 77
-- On statement shift to state 88
-- On single_statement shift to state 87
-- On RET reduce production statement -> single_statement 
-- On RBRACKET reduce production statement -> single_statement 

State 88:
statement -> single_statement statement . [ RET RBRACKET ]
-- On RET reduce production statement -> single_statement statement 
-- On RBRACKET reduce production statement -> single_statement statement 

State 89:
single_statement -> IF LPAR expr RPAR LBRACKET statement RBRACKET option(else_body) . [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On WHILE reduce production single_statement -> IF LPAR expr RPAR LBRACKET statement RBRACKET option(else_body) 
-- On TIMES reduce production single_statement -> IF LPAR expr RPAR LBRACKET statement RBRACKET option(else_body) 
-- On RET reduce production single_statement -> IF LPAR expr RPAR LBRACKET statement RBRACKET option(else_body) 
-- On RBRACKET reduce production single_statement -> IF LPAR expr RPAR LBRACKET statement RBRACKET option(else_body) 
-- On OUTPUT reduce production single_statement -> IF LPAR expr RPAR LBRACKET statement RBRACKET option(else_body) 
-- On IF reduce production single_statement -> IF LPAR expr RPAR LBRACKET statement RBRACKET option(else_body) 
-- On IDENT reduce production single_statement -> IF LPAR expr RPAR LBRACKET statement RBRACKET option(else_body) 

State 90:
option(else_body) -> else_body . [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On WHILE reduce production option(else_body) -> else_body 
-- On TIMES reduce production option(else_body) -> else_body 
-- On RET reduce production option(else_body) -> else_body 
-- On RBRACKET reduce production option(else_body) -> else_body 
-- On OUTPUT reduce production option(else_body) -> else_body 
-- On IF reduce production option(else_body) -> else_body 
-- On IDENT reduce production option(else_body) -> else_body 

State 91:
single_statement -> WHILE LPAR expr RPAR LBRACKET statement . RBRACKET [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On RBRACKET shift to state 92

State 92:
single_statement -> WHILE LPAR expr RPAR LBRACKET statement RBRACKET . [ WHILE TIMES RET RBRACKET OUTPUT IF IDENT ]
-- On WHILE reduce production single_statement -> WHILE LPAR expr RPAR LBRACKET statement RBRACKET 
-- On TIMES reduce production single_statement -> WHILE LPAR expr RPAR LBRACKET statement RBRACKET 
-- On RET reduce production single_statement -> WHILE LPAR expr RPAR LBRACKET statement RBRACKET 
-- On RBRACKET reduce production single_statement -> WHILE LPAR expr RPAR LBRACKET statement RBRACKET 
-- On OUTPUT reduce production single_statement -> WHILE LPAR expr RPAR LBRACKET statement RBRACKET 
-- On IF reduce production single_statement -> WHILE LPAR expr RPAR LBRACKET statement RBRACKET 
-- On IDENT reduce production single_statement -> WHILE LPAR expr RPAR LBRACKET statement RBRACKET 

State 93:
tip_function -> IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR LBRACKET option(var_stat) statement . ret_stat RBRACKET [ IDENT EOF ]
-- On RET shift to state 94
-- On ret_stat shift to state 97

State 94:
ret_stat -> RET . expr SEMI [ RBRACKET ]
-- On TIMES shift to state 17
-- On NULL shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 20
-- On LBRACKET shift to state 21
-- On INT shift to state 24
-- On INPUT shift to state 25
-- On IDENT shift to state 26
-- On AMPER shift to state 27
-- On ALLOC shift to state 29
-- On expr shift to state 95

State 95:
expr -> expr . PLUS expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . MINUS expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . TIMES expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . DIV expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . EQEQ expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . GREATER expr [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
expr -> expr . PROJECT [ TIMES SEMI PROJECT PLUS MINUS LPAR GREATER EQEQ DIV ]
ret_stat -> RET expr . SEMI [ RBRACKET ]
-- On TIMES shift to state 37
-- On SEMI shift to state 96
-- On PROJECT shift to state 31
-- On PLUS shift to state 39
-- On MINUS shift to state 43
-- On LPAR shift to state 32
-- On GREATER shift to state 45
-- On EQEQ shift to state 47
-- On DIV shift to state 41

State 96:
ret_stat -> RET expr SEMI . [ RBRACKET ]
-- On RBRACKET reduce production ret_stat -> RET expr SEMI 

State 97:
tip_function -> IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR LBRACKET option(var_stat) statement ret_stat . RBRACKET [ IDENT EOF ]
-- On RBRACKET shift to state 98

State 98:
tip_function -> IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR LBRACKET option(var_stat) statement ret_stat RBRACKET . [ IDENT EOF ]
-- On IDENT reduce production tip_function -> IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR LBRACKET option(var_stat) statement ret_stat RBRACKET 
-- On EOF reduce production tip_function -> IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR LBRACKET option(var_stat) statement ret_stat RBRACKET 

State 99:
list(tip_function) -> tip_function . list(tip_function) [ EOF ]
-- On IDENT shift to state 1
-- On tip_function shift to state 99
-- On list(tip_function) shift to state 100
-- On EOF reduce production list(tip_function) -> 

State 100:
list(tip_function) -> tip_function list(tip_function) . [ EOF ]
-- On EOF reduce production list(tip_function) -> tip_function list(tip_function) 

State 101:
program' -> program . [ # ]
-- On # accept program

State 102:
program -> list(tip_function) . EOF [ # ]
-- On EOF shift to state 103

State 103:
program -> list(tip_function) EOF . [ # ]
-- On # reduce production program -> list(tip_function) EOF 

